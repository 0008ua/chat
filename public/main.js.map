{"version":3,"sources":["./$_lazy_route_resource lazy namespace object","./src/app/app-routing.module.ts","./src/app/app.component.ts","./src/app/app.component.html","./src/app/app.module.ts","./src/app/modules/nav/nav.component.ts","./src/app/modules/nav/nav.component.html","./src/app/modules/nav/nav.module.ts","./src/app/services/auth.guard.ts","./src/app/services/http-interceptor.service.ts","./src/app/services/no-auth.guard.ts","./src/app/services/socket.service.ts","./src/app/services/user.service.ts","./src/app/store/actions/socket.actions.ts","./src/app/store/actions/user.actions.ts","./src/app/store/effects/socket.effects.ts","./src/app/store/effects/user.effects.ts","./src/app/store/reducers/app.reducer.ts","./src/app/store/reducers/index.ts","./src/app/store/reducers/socket.reducer.ts","./src/app/store/reducers/user.reducer.ts","./src/app/store/store.module.ts","./src/environments/environment.ts","./src/main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { AuthGuard } from './services/auth.guard';\nimport { NoAuthGuard } from './services/no-auth.guard';\nimport { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nconst routes: Routes = [\n    {\n        path: 'auth',\n        loadChildren: () => import('./modules/auth/auth.module').then((m) => m.AuthModule),\n        canActivate: [NoAuthGuard],\n    },\n    {\n        path: 'chat',\n        loadChildren: () => import('./modules/chat/chat.module').then((m) => m.ChatModule),\n        canLoad: [AuthGuard],\n        canActivate: [AuthGuard],\n    },\n    {\n        path: '',\n        loadChildren: () => import('./modules/home/home.module').then((m) => m.HomeModule),\n    },\n    {\n        path: '**',\n        redirectTo: '',\n        pathMatch: 'full',\n    },\n];\n\n@NgModule({\n    imports: [RouterModule.forRoot(routes)],\n    exports: [RouterModule],\n})\nexport class AppRoutingModule { }\n","import { UserService } from './services/user.service';\nimport { LoadUser } from './store/actions/user.actions';\nimport { Component, OnInit } from '@angular/core';\nimport { Store } from '@ngrx/store';\nimport { State } from './store/reducers';\n\n@Component({\n    selector: 'app-root',\n    templateUrl: './app.component.html',\n    styleUrls: ['./app.component.scss'],\n})\n\nexport class AppComponent implements OnInit {\n    constructor(\n        private store: Store<State>,\n        private userService: UserService,\n    ) { }\n\n    ngOnInit() {\n        this.store.dispatch(new LoadUser());\n    }\n}\n","<app-nav></app-nav>\r\n<router-outlet></router-outlet>\r\n","import { NavModule } from './modules/nav/nav.module';\nimport { CookieService } from 'ngx-cookie-service';\nimport { SocketIoModule, SocketIoConfig, Socket } from 'ngx-socket-io';\nimport { AppStoreModule } from './store/store.module';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { InjectionToken, NgModule } from '@angular/core';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { ServiceWorkerModule } from '@angular/service-worker';\nimport { environment } from '../environments/environment';\nimport { HTTP_INTERCEPTORS, HttpClientModule } from '@angular/common/http';\nimport { HttpInterceptorService } from './services/http-interceptor.service';\n\n\nconst config: SocketIoConfig = { url: '/', options: { autoConnect: false } };\n\n@NgModule({\n    declarations: [\n        AppComponent,\n    ],\n    imports: [\n        BrowserModule,\n        AppRoutingModule,\n        NavModule,\n        ServiceWorkerModule.register('ngsw-worker.js', { enabled: environment.production }),\n        AppStoreModule,\n        HttpClientModule,\n        SocketIoModule.forRoot(config),\n    ],\n    providers: [\n        CookieService,\n        { provide: HTTP_INTERCEPTORS, useClass: HttpInterceptorService, multi: true },\n        // { provide: Socket, useFactory: nspSocketServiceFactory },\n        // { provide: NSP_GUEST, useValue: environment.nsp.guest },\n    ],\n    bootstrap: [AppComponent],\n})\nexport class AppModule { }\n","import { Logout } from './../../store/actions/user.actions';\r\nimport { UserService } from './../../services/user.service';\r\nimport { Component, Directive, ElementRef, OnInit, QueryList, ViewChild, ViewChildren } from '@angular/core';\r\nimport { Store } from '@ngrx/store';\r\nimport { Collapse } from 'bootstrap';\r\nimport { User } from 'src/app/interfaces';\r\nimport { State } from 'src/app/store/reducers';\r\nimport { getUser } from 'src/app/store/reducers/user.reducer';\r\n\r\n\r\n@Component({\r\n    selector: 'app-nav',\r\n    templateUrl: './nav.component.html',\r\n    styleUrls: ['./nav.component.scss'],\r\n})\r\nexport class NavComponent implements OnInit {\r\n    @ViewChild('navbarToggler') menuToggleRef: ElementRef;\r\n    bsCollapse: any;\r\n    user: User;\r\n\r\n    constructor(\r\n        private store: Store<State>,\r\n        private userService: UserService,\r\n    ) { }\r\n\r\n    ngOnInit(): void {\r\n        this.store.select(getUser)\r\n            .subscribe((user) => this.user = user);\r\n    }\r\n\r\n    toggle() {\r\n        console.log('toggle');\r\n        this.bsCollapse.toggle();\r\n    }\r\n\r\n    ngAfterViewInit() {\r\n        this.bsCollapse = new Collapse(this.menuToggleRef.nativeElement, {toggle: false});\r\n    }\r\n\r\n    logout() {\r\n        this.store.dispatch(new Logout());\r\n    }\r\n}\r\n","<nav class=\"navbar navbar-expand-lg sticky-top navbar-dark bg-dark\">\r\n  <div class=\"container-fluid\">\r\n    <a class=\"navbar-brand mx-3\" [routerLink]=\"['/']\">Chat Application</a>\r\n    <button class=\"navbar-toggler\" type=\"button\" (click)=\"toggle()\" aria-controls=\"navbarToggler\" aria-expanded=\"false\"\r\n      aria-label=\"Toggle navigation\">\r\n      <span class=\"navbar-toggler-icon\"></span>\r\n    </button>\r\n    <div class=\"collapse navbar-collapse\" id=\"navbarToggler\" #navbarToggler>\r\n      <ul class=\"navbar-nav ms-auto mb-2 mb-lg-0 me-5\">\r\n\r\n        <li class=\"nav-item mx-3\">\r\n          <a class=\"nav-link\" aria-current=\"page\" [routerLink]=\"['/']\" [routerLinkActiveOptions]=\"{exact: true}\"\r\n            routerLinkActive=\"active\">Home</a>\r\n        </li>\r\n        <!-- <li *ngIf=\"user && user?.role !== 'guest'\" class=\"nav-item mx-3\"> -->\r\n        <li *ngIf=\"user\" class=\"nav-item mx-3\">\r\n          <a class=\"nav-link\" aria-current=\"page\" [routerLink]=\"['/chat']\" [routerLinkActiveOptions]=\"{exact: true}\"\r\n            routerLinkActive=\"active\">Chat</a>\r\n        </li>\r\n        <li *ngIf=\"!user || user?.role === 'guest'\" class=\"nav-item mx-3\">\r\n          <a class=\"nav-link\" aria-current=\"page\" [routerLink]=\"['auth', 'signin']\"\r\n            [routerLinkActiveOptions]=\"{exact: true}\" routerLinkActive=\"active\">Signin</a>\r\n        </li>\r\n        <li *ngIf=\"user && user?.role !== 'guest'\" class=\"nav-item mx-3\">\r\n          <a class=\"nav-link cursor-pointer\" aria-current=\"page\" (click)=\"logout()\">Logout</a>\r\n        </li>\r\n        <li *ngIf=\"user && user?.role === 'guest'\" class=\"nav-item mx-3\">\r\n          <a class=\"nav-link cursor-pointer\" aria-current=\"page\" (click)=\"logout()\">Leave chat</a>\r\n        </li>\r\n        <li *ngIf=\"user\" class=\"nav-item navbar-text mx-3 text-light\">\r\n          <i class=\"bi bi-person-circle pe-2\"></i>{{user.name}}\r\n        </li>\r\n      </ul>\r\n    </div>\r\n  </div>\r\n</nav>\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { NavComponent } from './nav.component';\r\nimport { RouterModule } from '@angular/router';\r\n\r\n@NgModule({\r\n    declarations: [\r\n        NavComponent,\r\n    ],\r\n    imports: [\r\n        CommonModule,\r\n        RouterModule,\r\n    ],\r\n    exports: [\r\n        NavComponent,\r\n    ],\r\n})\r\nexport class NavModule { }\r\n","import { Injectable } from '@angular/core';\nimport { CanLoad, Route, UrlSegment, ActivatedRouteSnapshot, RouterStateSnapshot, UrlTree, Router, CanActivate } from '@angular/router';\nimport { Observable } from 'rxjs';\n\nimport { Store } from '@ngrx/store';\nimport { State } from '../store/reducers';\n\nimport { map, take } from 'rxjs/operators';\nimport { getUser } from '../store/reducers/user.reducer';\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class AuthGuard implements CanLoad, CanActivate {\n    constructor(\n        private router: Router,\n        private store: Store<State>,\n    ) { }\n\n    // Prevents fetching lazy loading modules\n    canLoad(route: Route, segments: UrlSegment[]): Observable<boolean> | Promise<boolean> | boolean {\n        return this.store.select(getUser).pipe(\n            map((user) => {\n                if (!user) {\n                    this.router.navigateByUrl('/auth/signin');\n                    return false;\n                }\n                return true;\n            }),\n            take(1),\n        );\n    }\n\n    // If lazy loadnig module already fetched and user logged out\n    // this guard prevents to activate module\n    canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot):\n    Observable<boolean | UrlTree> | Promise<boolean | UrlTree> | boolean | UrlTree {\n        return this.store.select(getUser).pipe(\n            map((user) => {\n                if (!user) {\n                    this.router.navigateByUrl('/auth/signin');\n                    return false;\n                }\n                return true;\n            }),\n        // take(1),\n        );\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { HttpEvent, HttpInterceptor, HttpHandler, HttpRequest, HttpResponse } from '@angular/common/http';\n\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\n\nimport { Store } from '@ngrx/store';\nimport { State } from '../store/reducers';\nimport { LoadUser } from '../store/actions/user.actions';\n\n@Injectable({\n    providedIn: 'root',\n})\n\nexport class HttpInterceptorService implements HttpInterceptor {\n    constructor(\n        private store: Store<State>,\n    ) { }\n\n    intercept(req: HttpRequest<any>, next: HttpHandler):\n    Observable<HttpEvent<any>> {\n    // to modify request\n        // req = req.clone();\n        // return next.handle(req);\n\n\n        return next.handle(req).pipe(\n            tap((event: HttpEvent<any>) => {\n                if (event instanceof HttpResponse) {\n                    // fire action to check user auth\n                    this.store.dispatch(new LoadUser());\n\n                    // to modify response\n                    // event = event.clone({ body: this.modifyBody(event.body) });\n                }\n                return event;\n            },\n            ));\n    }\n\n    private modifyBody(body: any) {\n    /*\n    * write your logic to modify the body\n    * */\n        return body;\n    }\n}\n\n\n","import { Injectable } from '@angular/core';\nimport { ActivatedRouteSnapshot, RouterStateSnapshot, UrlTree, Router, CanActivate } from '@angular/router';\nimport { Observable } from 'rxjs';\n\nimport { Store } from '@ngrx/store';\nimport { State } from '../store/reducers';\n\nimport { UserService } from './user.service';\nimport { map } from 'rxjs/operators';\nimport { getUser } from '../store/reducers/user.reducer';\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class NoAuthGuard implements CanActivate {\n    constructor(\n        private userService: UserService,\n        private router: Router,\n        private store: Store<State>,\n\n    ) { }\n\n    canActivate( route: ActivatedRouteSnapshot, state: RouterStateSnapshot):\n    Observable<boolean | UrlTree>| Promise<boolean | UrlTree>| boolean | UrlTree {\n        return this.store.select(getUser).pipe(\n            map((user) => {\n                if (user && user.role !== 'guest') {\n                    this.router.navigateByUrl('/');\n                    return false;\n                }\n                return true;\n            }),\n        // take(1),\n        );\n    }\n}\n","import { HttpHeaders, HttpClient, HttpParams } from '@angular/common/http';\nimport { NspType, Msg, User, MessageType, Message, NSP, Room } from './../interfaces';\nimport { getUser } from './../store/reducers/user.reducer';\nimport { Injectable } from '@angular/core';\nimport { Socket, SocketIoConfig } from 'ngx-socket-io';\nimport { map, tap } from 'rxjs/operators';\nimport { v4 as uuidv4 } from 'uuid';\nimport { Observable, of } from 'rxjs';\nimport { Store } from '@ngrx/store';\nimport { State } from '../store/reducers';\nimport { getMsgs } from '../store/reducers/socket.reducer';\nimport { GetMessagesSuccess } from '../store/actions/socket.actions';\n\nexport class SocketNsp extends Socket {\n    constructor(socketConfig: SocketIoConfig) {\n        super(socketConfig);\n    }\n}\n\n@Injectable({\n    providedIn: 'root',\n})\n\nexport class SocketService {\n    user: User | null;\n    msgs: Message[];\n\n    constructor(\n        private socket: Socket,\n        private store: Store<State>,\n        private http: HttpClient,\n    ) {\n        this.store.select(getUser)\n            .subscribe((user) => this.user = user);\n\n        this.store.select(getMsgs)\n            .subscribe((msgs) => this.msgs = msgs);\n    }\n\n    isConnected(nsp?: NspType): Socket | SocketNsp {\n        if (nsp) {\n            return this.socketNsp(nsp);\n        }\n        return this.socket;\n    }\n\n    connect(nsp?: NspType): void {\n        if (nsp === 'guest') {\n            this.socketNsp(nsp).connect();\n            return;\n        }\n        if (nsp === 'user') {\n            this.socketNsp(nsp).connect();\n            this.socketNsp('guest').connect();\n            return;\n        }\n        this.socket.connect();\n    }\n\n    disconnect(nsp?: NspType): void {\n        if (nsp === 'guest') {\n            this.socketNsp(nsp).disconnect();\n            return;\n        }\n        if (nsp === 'user') {\n            this.socketNsp(nsp).disconnect();\n            this.socketNsp('guest').disconnect();\n            return;\n        }\n        this.socket.disconnect();\n    }\n\n    onSocketEvent(socketEvent: MessageType, nsp?: NspType) {\n        if (nsp) {\n            return this.socketNsp(nsp).fromEvent(socketEvent).pipe(\n                map((data: Message) => data));\n        }\n        return this.socket.fromEvent(socketEvent).pipe(\n            map((data: Message) => data));\n    }\n\n    emitSocketEvent(socketEvent: MessageType, socketData: Message | [Message, Function]) {\n        // if use emit with callback then pass socketData as array [Message, callback]\n        // otherwise socketData is Message object\n        this.socket.emit(socketEvent, ...Array.isArray(socketData) ? socketData : [socketData]);\n    }\n\n\n    private socketNsp(nsp: NspType): SocketNsp {\n        return this[nsp + 'Nsp'];\n    }\n\n    private socketNspFactory(nsp: NspType) {\n        return new SocketNsp({ url: '/' + nsp + 'Nsp', options: {} });\n    }\n\n    getUserRooms():Observable<Room[]> {\n        const httpOptions = {\n            headers: new HttpHeaders({\n                'Content-Type': 'application/json',\n            }),\n        };\n        return this.http.get<Room[]>(\n            'api/socket/get-user-rooms',\n            httpOptions,\n        ).pipe(tap((getUserRooms) => console.log('getUserRooms', getUserRooms)));\n    }\n\n    getUnreadedMessagesQty(room_id: string): Observable<number> {\n        const httpOptions = {\n            headers: new HttpHeaders({\n                'Content-Type': 'application/json',\n            }),\n            params: new HttpParams()\n                .set('room_id', room_id),\n        };\n        return this.http.get<number>(\n            'api/socket/get-unreaded-messages-qty',\n            httpOptions,\n        );\n    }\n\n    getGetActiveContactMsgs({ anotherUser_id, room_id }): Observable<Msg[]> {\n        const httpOptions = {\n            headers: new HttpHeaders({\n                'Content-Type': 'application/json',\n            }),\n            params: new HttpParams()\n                .set('anotherUser_id', anotherUser_id)\n                .set('room_id', room_id),\n        };\n        return this.http.get<Msg[]>(\n            'api/socket/get-active-contact-msgs',\n            httpOptions,\n        );\n    }\n\n    uuid() {\n        return uuidv4();\n    }\n\n    composeMessage(text: string): Msg {\n        return {\n            text,\n        };\n    }\n}\n\n\n","import { SocketService } from './socket.service';\nimport { map, switchMap } from 'rxjs/operators';\nimport { Injectable } from '@angular/core';\nimport { Observable, of } from 'rxjs';\nimport { User, UserCandidate } from '../interfaces';\nimport { CookieService } from 'ngx-cookie-service';\nimport { JwtHelperService } from '@auth0/angular-jwt';\nimport { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\nimport { AbstractControl, ValidationErrors } from '@angular/forms';\nimport { Store } from '@ngrx/store';\nimport { getUser, redirectionUrl } from '../store/reducers/user.reducer';\nimport { Router } from '@angular/router';\nimport { Redirection } from '../store/actions/user.actions';\nimport { State } from '../store/reducers';\n\n@Injectable({\n    providedIn: 'root',\n})\nexport class UserService {\n    user: User;\n\n    constructor(\n        private http: HttpClient,\n        private cookieService: CookieService,\n        private store: Store<State>,\n        private router: Router,\n        private socketService: SocketService,\n    ) {\n        this.store.select(getUser)\n            .subscribe((user) => this.user = user);\n\n        this.store.select(redirectionUrl)\n            .subscribe((url) => {\n                if (url) {\n                    this.router.navigateByUrl(url);\n                    this.store.dispatch(new Redirection(null));\n                }\n            });\n    }\n\n    loadUser(): Observable<User | null> {\n        const token = this.cookieService.get('chatClient');\n        const helper = new JwtHelperService();\n        if (token && !helper.isTokenExpired(token) ) {\n            const { user } = helper.decodeToken(token);\n            return of(user);\n        }\n        return of(null);\n    }\n\n    loginAnonymous(name: Pick<UserCandidate, 'name'>): Observable<void> {\n        const httpOptions = {\n            headers: new HttpHeaders({\n                'Content-Type': 'application/json',\n            }),\n        };\n        return this.http.post<null>(\n            'api/user/loginAnonymous',\n            {name},\n            httpOptions,\n        );\n    }\n\n    login(userCandidate: UserCandidate): Observable<null> {\n        const httpOptions = {\n            headers: new HttpHeaders({\n                'Content-Type': 'application/json',\n            }),\n        };\n\n        const login$ = this.http.post<null>(\n            'api/user/login',\n            userCandidate,\n            httpOptions,\n        );\n\n        if (this.user?.role === 'guest') {\n            this.logout().pipe(\n                switchMap((_) => login$),\n            );\n        }\n\n        return login$;\n    }\n\n    signup(userCandidate: UserCandidate): Observable<null> {\n        const httpOptions = {\n            headers: new HttpHeaders({\n                'Content-Type': 'application/json',\n            }),\n        };\n\n        const signup$ = this.http.post<null>(\n            'api/user/signup',\n            userCandidate,\n            httpOptions,\n        );\n\n        if (this.user?.role === 'guest') {\n            this.logout().pipe(\n                switchMap((_) => signup$),\n            );\n        }\n\n        return signup$;\n    }\n\n\n    logout(): Observable<null> {\n        const httpOptions = {\n            headers: new HttpHeaders({\n                'Content-Type': 'application/json',\n            }),\n        };\n        return this.http.get<null>(\n            'api/user/logout',\n            httpOptions,\n        );\n    }\n\n    matchPassword(abstractControl: AbstractControl): ValidationErrors | null {\n        const password = abstractControl.get('password').value;\n        const passwordConfirm = abstractControl.get('passwordConfirm').value;\n        if (password === passwordConfirm) {\n            abstractControl.get('passwordConfirm').setErrors(null);\n            return null;\n        } else {\n            /**\n       * set error to 'passwordConfirm' element\n       */\n\n            abstractControl.get('passwordConfirm').setErrors({ mismatch: true });\n            /**\n       * and don't set error (null) to formGroup\n       */\n            return null;\n        }\n    }\n\n    // localGuest(): Observable<string> {\n    //     const httpOptions = {\n    //         headers: new HttpHeaders({\n    //             'Content-Type': 'application/json',\n    //         }),\n    //     };\n\n    //     return this.http.post<string>(\n    //         'api/user/guest',\n    //         null,\n    //         httpOptions,\n    //     );\n    // }\n}\n","import { NspType, ActiveSocket, Room, Msg, User, Contact } from './../../interfaces';\nimport { Action } from '@ngrx/store';\nimport { Message } from 'src/app/interfaces';\n\nexport enum SocketActionTypes {\n    GetMessages = 'socket/get messages',\n    GetMessagesSuccess = 'socket/get messages success',\n    GetUserRooms = 'socket/get user rooms',\n    GetUserRoomsSuccess = 'socket/get user rooms success',\n    ActiveSockets = 'socket/get active sockets',\n    GetActiveContactMsgs = 'socket/get active contact msgs',\n    GetActiveContactMsgsSuccess = 'socket/get active contact msgs success',\n    UpdateContacts = 'socket/update contacts',\n    UpdateContactsSuccess = 'socket/update contacts success',\n    SocketError = 'socket/error',\n    Connect = 'socket/connect',\n    Disconnect = 'socket/disconnect',\n    Status = 'socket/status',\n}\n\n// get mesgs from server\nexport class GetMessages implements Action {\n    readonly type = SocketActionTypes.GetMessages;\n    constructor(public payload: Pick<Room, '_id' >) { }\n}\n\nexport class GetMessagesSuccess implements Action {\n    readonly type = SocketActionTypes.GetMessagesSuccess;\n    constructor(public payload: {msgs: Msg[]}) { }\n}\n\nexport class GetUserRooms implements Action {\n    readonly type = SocketActionTypes.GetUserRooms;\n    // constructor(public payload: {_id: string}) {}\n}\n\nexport class GetUserRoomsSuccess implements Action {\n    readonly type = SocketActionTypes.GetUserRoomsSuccess;\n    constructor(public payload: { userRooms: Room[] }) { }\n}\n\nexport class ActiveSockets implements Action {\n    readonly type = SocketActionTypes.ActiveSockets;\n    constructor(public payload: {activeSockets: ActiveSocket[]}) { }\n}\n\nexport class GetActiveContactMsgs implements Action {\n    readonly type = SocketActionTypes.GetActiveContactMsgs;\n    constructor(public payload: { activeContact: Contact }) { }\n}\n\nexport class GetActiveContactMsgsSuccess implements Action {\n    readonly type = SocketActionTypes.GetActiveContactMsgsSuccess;\n    constructor(public payload: { activeContactMsgs: Msg[] }) { }\n}\n\nexport class UpdateContacts implements Action {\n    readonly type = SocketActionTypes.UpdateContacts;\n}\n\nexport class UpdateContactsSuccess implements Action {\n    readonly type = SocketActionTypes.UpdateContactsSuccess;\n    constructor(public payload: { contacts: Contact[] }) { }\n}\n\nexport class SocketError implements Action {\n    readonly type = SocketActionTypes.SocketError;\n    constructor(public payload: any) { }\n}\n\nexport class Status implements Action {\n    readonly type = SocketActionTypes.Status;\n    constructor(public payload: 'connected' | 'disconnected') { }\n}\n\nexport class Connect implements Action {\n    readonly type = SocketActionTypes.Connect;\n    constructor(public payload?: NspType) { }\n}\n\nexport class Disconnect implements Action {\n    readonly type = SocketActionTypes.Disconnect;\n    constructor(public payload?: NspType) { }\n}\n\nexport type SocketActions\n  = GetMessages\n  | GetMessagesSuccess\n  | GetUserRooms\n  | GetUserRoomsSuccess\n  | SocketError\n  | Status\n  | Connect\n  | Disconnect\n  | ActiveSockets\n  | GetActiveContactMsgs\n  | GetActiveContactMsgsSuccess\n  | UpdateContacts\n  | UpdateContactsSuccess;\n","import { User, UserCandidate } from './../../interfaces';\nimport { Action } from '@ngrx/store';\n\n\nexport enum UserActionTypes {\n    LoadUser = '[User] Load User',\n    Authenticated = '[User] Authenticated User',\n    NotAuthenticated = '[User] NotAuthenticated User',\n    AuthError = '[User] AuthError',\n    Redirection = '[User] Redirection',\n    Login = '[User] Login',\n    LoginAnonymous = '[User] LoginAnonymous',\n    Signup = '[User] Signup',\n    Logout = '[User] Logout',\n}\n\nexport class LoadUser implements Action {\n    readonly type = UserActionTypes.LoadUser;\n}\n\nexport class Authenticated implements Action {\n    readonly type = UserActionTypes.Authenticated;\n    constructor(public payload: User) { }\n}\n\nexport class NotAuthenticated implements Action {\n    readonly type = UserActionTypes.NotAuthenticated;\n}\n\nexport class AuthError implements Action {\n    readonly type = UserActionTypes.AuthError;\n    constructor(public payload: any) { }\n}\n\nexport class Redirection implements Action {\n    readonly type = UserActionTypes.Redirection;\n    constructor(public payload: string | null ) { }\n}\n\nexport class Login implements Action {\n    readonly type = UserActionTypes.Login;\n    constructor(public payload: UserCandidate) { }\n}\n\nexport class LoginAnonymous implements Action {\n    readonly type = UserActionTypes.LoginAnonymous;\n    constructor(public payload: Pick<UserCandidate, 'name'>) { }\n}\n\nexport class Signup implements Action {\n    readonly type = UserActionTypes.Signup;\n    constructor(public payload: UserCandidate) { }\n}\n\nexport class Logout implements Action {\n    readonly type = UserActionTypes.Logout;\n}\n\nexport type UserActions\n  = LoadUser\n  | Authenticated\n  | NotAuthenticated\n  | AuthError\n  | Redirection\n  | Login\n  | LoginAnonymous\n  | Signup\n  | Logout;\n  \n\n","import { ActiveSocket } from './../../interfaces';\nimport { getActiveSockets } from './../reducers/socket.reducer';\nimport { GetUserRooms, UpdateContacts, GetActiveContactMsgs } from './../actions/socket.actions';\nimport { SocketService } from './../../services/socket.service';\nimport { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Action, Store } from '@ngrx/store';\nimport { from, Observable, of, zip } from 'rxjs';\nimport { catchError, concatAll, flatMap, map, mergeMap, scan, switchMap, tap, toArray, withLatestFrom } from 'rxjs/operators';\nimport * as fromSocketActions from '../actions/socket.actions';\nimport { State } from '../reducers';\nimport { getUserRooms } from '../reducers/socket.reducer';\nimport { Contact, Room } from 'src/app/interfaces';\n\n@Injectable()\nexport class SocketEffects {\n    constructor(\n        private actions$: Actions,\n        private store$: Store<State>,\n        private socketService: SocketService,\n    ) { }\n\n    // @Effect()\n    // getMessages: Observable<Action | Action[]> = this.actions$.pipe(\n    //     ofType(fromSocketActions.SocketActionTypes.GetMessages),\n    //     map((action: fromSocketActions.GetMessages) => action.payload),\n    //     switchMap((payload) => this.socketService.getMessages({ room_id: payload._id }).pipe(\n    //         map((msgs) => new fromSocketActions.GetMessagesSuccess({ msgs })),\n    //         catchError((err) => of(new fromSocketActions.SocketError(err))),\n    //     )),\n    // );\n\n    @Effect()\n    getUserRooms: Observable<Action | Action[]> = this.actions$.pipe(\n        ofType(fromSocketActions.SocketActionTypes.GetUserRooms),\n        // map((action: fromSocketActions.GetUserRooms) => action.payload),\n        switchMap((payload) => this.socketService.getUserRooms().pipe(\n            tap((userRooms) => console.log('get userRooms', userRooms)),\n            switchMap((userRooms) => [\n                new fromSocketActions.GetUserRoomsSuccess({ userRooms }),\n                new fromSocketActions.UpdateContacts(),\n            ]),\n            catchError((err) => of(new fromSocketActions.SocketError(err))),\n        )),\n    );\n\n\n    @Effect()\n    getActiveContactMsgs: Observable<Action | Action[]> = this.actions$.pipe(\n        ofType(fromSocketActions.SocketActionTypes.GetActiveContactMsgs),\n        map((action: fromSocketActions.GetActiveContactMsgs) => action.payload),\n        switchMap((payload) => this.socketService.getGetActiveContactMsgs({\n            anotherUser_id: payload.activeContact.user_id, room_id: payload.activeContact.room_id,\n        }).pipe(\n            map((activeContactMsgs) =>\n                new fromSocketActions.GetActiveContactMsgsSuccess({ activeContactMsgs }),\n            ),\n            catchError((err) => of(new fromSocketActions.SocketError(err))),\n        )),\n    );\n\n    @Effect()\n    activeSockets: Observable<Action | Action[]> = this.actions$.pipe(\n        ofType(fromSocketActions.SocketActionTypes.ActiveSockets),\n        tap((tap) => console.log('tap', tap)),\n        map((_) => new fromSocketActions.UpdateContacts()),\n        catchError((err) => of(new fromSocketActions.SocketError(err))),\n    );\n\n    @Effect()\n    updateContacts: Observable<Action | Action[]> = this.actions$.pipe(\n        ofType(fromSocketActions.SocketActionTypes.UpdateContacts),\n        withLatestFrom(\n            this.store$.select(getUserRooms),\n            this.store$.select(getActiveSockets)),\n        map(([action, userRooms, activeSockets]: [Action, Room[], ActiveSocket[]]): Contact[] => {\n            console.log('userRooms-update', userRooms);\n            console.log('activeSockets-update', activeSockets);\n\n            let contacts = userRooms.map((room) => {\n                let socket_id = null;\n                activeSockets = activeSockets.filter((socket) => {\n                    if (socket.user_id === room.anotherUser._id) {\n                        socket_id = socket.socket_id;\n                        return false;\n                    }\n                    return true;\n                });\n                if (socket_id) {\n                    const result = {\n                        socket_id,\n                        room_id: room._id,\n                        user_id: room.anotherUser._id,\n                        userName: room.anotherUser.name,\n                        userLogin: room.anotherUser.login,\n                        userRole: room.anotherUser.role,\n                        unreadedMessagesQty: 0,\n                    };\n                    socket_id = null;\n                    return result;\n                }\n                const result = {\n                    socket_id: null,\n                    room_id: room._id,\n                    user_id: room.anotherUser._id,\n                    userName: room.anotherUser.name,\n                    userLogin: room.anotherUser.login,\n                    userRole: room.anotherUser.role,\n                    unreadedMessagesQty: 0,\n                };\n                return result;\n            });\n            contacts = [...contacts, ...activeSockets.map((socket) => ({ ...socket, room_id: null }))];\n            return contacts;\n        }),\n\n        mergeMap((contacts) => from(contacts).pipe(\n            mergeMap((contact) => {\n                if (contact.room_id) {\n                    return this.socketService.getUnreadedMessagesQty(contact.room_id).pipe(\n                        map((qty) => ({ ...contact, unreadedMessagesQty: qty }))\n                    );\n                }\n                return of({ ...contact, unreadedMessagesQty: 0 });\n            }),\n            toArray(),\n        )),\n        map((contacts: Contact[]) => {\n            console.log('contacts', contacts);\n            return new fromSocketActions.UpdateContactsSuccess({ contacts: contacts });\n        }),\n\n\n        catchError((err) => of(new fromSocketActions.SocketError(err))),\n\n\n    );\n    // ),\n\n    // ),\n    // map((contacts) => of(contacts).pipe(\n    // switchMap((contacts) => {\n    //     return of(contacts.map((contact) => {\n    //         if (contact.room_id) {\n    //             return this.socketService.getUnreadedMessagesQty(contact.room_id).pipe(\n    //                 map((qty) => ({...contact, unreadedMessagesQty: qty}))\n    //             );\n    //         }\n    //         return ({ ...contact, unreadedMessagesQty: 0 });\n    //     }));\n    // }),\n    // )),\n\n    // );\n\n    @Effect()\n    connect: Observable<Action | Action[]> = this.actions$.pipe(\n        ofType(fromSocketActions.SocketActionTypes.Connect),\n        map((action: fromSocketActions.Connect) => action.payload),\n        map((payload) => {\n            this.socketService.connect(payload);\n            // this.socketService.connect('user');\n            return new fromSocketActions.Status('connected');\n        }),\n        catchError((err) => of(new fromSocketActions.SocketError(err))),\n    );\n\n    @Effect()\n    disconnect: Observable<Action | Action[]> = this.actions$.pipe(\n        ofType(fromSocketActions.SocketActionTypes.Disconnect),\n        map((action: fromSocketActions.Disconnect) => action.payload),\n        map((payload) => {\n            this.socketService.disconnect(payload);\n            // this.socketService.disconnect('user');\n            return new fromSocketActions.Status('disconnected');\n        }),\n        catchError((err) => of(new fromSocketActions.SocketError(err))),\n    );\n}\n","import { UserService } from './../../services/user.service';\nimport * as fromUserActions from './../actions/user.actions';\nimport * as fromSocketActions from './../actions/socket.actions';\nimport { Injectable } from '@angular/core';\nimport { Actions, Effect, ofType } from '@ngrx/effects';\nimport { Action } from '@ngrx/store';\nimport { Observable, of } from 'rxjs';\nimport { catchError, map, switchMap } from 'rxjs/operators';\n\n\n@Injectable()\nexport class UserEffects {\n    @Effect()\n    loadUser: Observable<Action | Action[]> = this.actions$.pipe(\n        ofType(fromUserActions.UserActionTypes.LoadUser),\n        map((action: fromUserActions.LoadUser) => null),\n        switchMap((_) => this.userService.loadUser().pipe(\n            switchMap((user) => {\n                let actions: Action[];\n                if (user) {\n                    // User logged in\n                    actions = [new fromUserActions.Authenticated(user), new fromSocketActions.Connect()];\n                    // actions = [new fromUserActions.Authenticated(user), new fromSocketActions.Connect(user.role)];\n                } else {\n                    // User not logged in\n                    actions = [new fromUserActions.NotAuthenticated(), new fromSocketActions.Disconnect()];\n                }\n                return actions;\n            }),\n            catchError((err) => [\n                new fromUserActions.AuthError(err),\n                new fromUserActions.NotAuthenticated(),\n                new fromSocketActions.Disconnect(),\n            ]),\n        )),\n    );\n\n    @Effect()\n    logout: Observable<Action | Action[]> = this.actions$.pipe(\n        ofType(fromUserActions.UserActionTypes.Logout),\n        switchMap(() => this.userService.logout().pipe(\n            map((_) => new fromUserActions.Redirection('/')),\n            catchError((err) => of(new fromUserActions.AuthError(err))),\n        )),\n    );\n\n    @Effect()\n    login: Observable<Action | Action[]> = this.actions$.pipe(\n        ofType(fromUserActions.UserActionTypes.Login),\n        map((action: fromUserActions.Login) => action.payload),\n        switchMap((payload) => this.userService.login(payload).pipe(\n            map((_) => new fromUserActions.Redirection('/chat')),\n            catchError((err) => of(new fromUserActions.AuthError(err))),\n        )),\n    );\n\n    @Effect()\n    loginAnonymous: Observable<Action | Action[]> = this.actions$.pipe(\n        ofType(fromUserActions.UserActionTypes.LoginAnonymous),\n        map((action: fromUserActions.Login) => action.payload),\n        switchMap((payload) => this.userService.loginAnonymous(payload).pipe(\n            map((_) => new fromUserActions.Redirection('/chat')),\n            catchError((err) => of(new fromUserActions.AuthError(err))),\n        )),\n    );\n\n    @Effect()\n    signup: Observable<Action | Action[]> = this.actions$.pipe(\n        ofType(fromUserActions.UserActionTypes.Signup),\n        map((action: fromUserActions.Signup) => action.payload),\n        switchMap((payload) => this.userService.signup(payload).pipe(\n            map((_) => new fromUserActions.Redirection('/')),\n            catchError((err) => of(new fromUserActions.AuthError(err))),\n        )),\n    );\n\n    constructor(\n        private actions$: Actions,\n        private userService: UserService,\n    ) {}\n}\n","import { Action, createFeatureSelector, createSelector } from '@ngrx/store';\n\n\nexport const appFeatureKey = 'app';\n\nexport interface State {\n  loading: boolean;\n\n}\n\nexport const initialState: State = {\n  loading: false,\n};\n\nexport function reducer(state = initialState, action: Action): State {\n  switch (action.type) {\n\n    default:\n      return state;\n  }\n}\n\nconst featureSelector = createFeatureSelector<State>(appFeatureKey);\n\nexport const getLoading = createSelector(featureSelector, (state) => state.loading);\n","import { ActionReducerMap, MetaReducer } from '@ngrx/store';\r\n\r\nimport { environment } from '../../../environments/environment';\r\nimport * as fromUser from './user.reducer';\r\nimport * as fromSocket from './socket.reducer';\r\nimport * as fromApp from './app.reducer';\r\n\r\nexport interface State {\r\n    user: fromUser.State;\r\n    socket: fromSocket.State;\r\n    app: fromApp.State;\r\n}\r\n\r\nexport const reducers: ActionReducerMap<State> = {\r\n    user: fromUser.reducer,\r\n    socket: fromSocket.reducer,\r\n    app: fromApp.reducer,\r\n};\r\n\r\nexport const metaReducers: MetaReducer<State>[] = !environment.production ? [] : [];\r\n","import { SocketActions, SocketActionTypes } from '../actions/socket.actions';\nimport { createFeatureSelector, createSelector } from '@ngrx/store';\nimport { ActiveSocket, Contact, Msg, Room } from 'src/app/interfaces';\n\nexport const socketFeatureKey = 'socket';\n\nexport interface State {\n    msgs: Msg[],\n    userRooms: Room[],\n    activeSockets: ActiveSocket[],\n    activeContact: Contact | null,\n    activeContactMsgs: Msg[],\n    contacts: any,\n    loading: boolean,\n    status: 'connected' | 'disconnected',\n}\n\nexport const initialState: State = {\n    msgs: [],\n    userRooms: [],\n    activeSockets: [],\n    activeContact: null,\n    activeContactMsgs: [],\n    contacts: [],\n    loading: false,\n    status: 'disconnected',\n};\n\nexport function reducer(state = initialState, action: SocketActions): State {\n    switch (action.type) {\n        case SocketActionTypes.ActiveSockets:\n            return { ...state, activeSockets: [...action.payload.activeSockets]};\n        case SocketActionTypes.GetActiveContactMsgs:\n            return { ...state, activeContact: action.payload.activeContact };\n        case SocketActionTypes.GetActiveContactMsgsSuccess:\n            return { ...state, activeContactMsgs: action.payload.activeContactMsgs };\n        case SocketActionTypes.GetMessages:\n            return { ...state, loading: true };\n        case SocketActionTypes.GetMessagesSuccess:\n            return { ...state, loading: false, activeContactMsgs: [...state.activeContactMsgs, ...action.payload.msgs]};\n        case SocketActionTypes.GetUserRoomsSuccess:\n            return { ...state, userRooms: action.payload.userRooms };\n        case SocketActionTypes.UpdateContactsSuccess:\n            return { ...state, contacts: action.payload.contacts };\n        case SocketActionTypes.Status:\n            return { ...state, status: action.payload };\n        default:\n            return state;\n    }\n}\n\nconst featureSelector = createFeatureSelector<State>(socketFeatureKey);\nexport const getMsgs = createSelector(featureSelector, (state) => state.msgs);\nexport const getUserRooms = createSelector(featureSelector, (state) => state.userRooms);\nexport const getActiveSockets = createSelector(featureSelector, (state) => state.activeSockets);\nexport const getContacts = createSelector(featureSelector, (state) => state.contacts);\nexport const getActiveContact = createSelector(featureSelector, (state) => state.activeContact);\nexport const getActiveContactMsgs = createSelector(featureSelector, (state) => state.activeContactMsgs);\nexport const getStatus = createSelector(featureSelector, (state) => state.status);\n","import { LoadUser } from './../actions/user.actions';\nimport { User } from './../../interfaces';\nimport { createFeatureSelector, createSelector } from '@ngrx/store';\nimport { UserActions, UserActionTypes } from '../actions/user.actions';\n\nexport const userFeatureKey = 'user';\n\nexport interface State {\n    user: User | null;\n    loading: boolean;\n    redirectionUrl: string | null;\n}\n\nexport const initialState: State = {\n    user: null,\n    loading: false,\n    redirectionUrl: null,\n};\n\nexport function reducer(state = initialState, action: UserActions): State {\n    switch (action.type) {\n        case UserActionTypes.LoadUser:\n            return { ...state, loading: true };\n\n        case UserActionTypes.Authenticated:\n            return { ...state, user: { ...action.payload }, loading: false };\n\n        case UserActionTypes.NotAuthenticated:\n            return { ...state, user: initialState.user, loading: false };\n\n        case UserActionTypes.Redirection:\n            return { ...state, redirectionUrl: action.payload };\n\n        default:\n            return state;\n    }\n}\n\nconst featureSelector = createFeatureSelector<State>(userFeatureKey);\n\nexport const getUser = createSelector(featureSelector, (state) => state.user);\nexport const redirectionUrl = createSelector(featureSelector, (state) => state.redirectionUrl);\n","import { StoreDevtoolsModule } from '@ngrx/store-devtools';\nimport { NgModule } from '@angular/core';\nimport { environment } from '../../environments/environment';\nimport { StoreModule } from '@ngrx/store';\nimport { reducers, metaReducers } from './reducers';\nimport { EffectsModule } from '@ngrx/effects';\nimport { UserEffects } from './effects/user.effects';\nimport { SocketEffects } from './effects/socket.effects';\n\n\n@NgModule({\n    declarations: [],\n    imports: [\n        StoreModule.forRoot(reducers, {\n            metaReducers,\n            runtimeChecks: {\n                strictStateImmutability: true,\n                strictActionImmutability: true,\n            },\n        }),\n        StoreDevtoolsModule.instrument({ maxAge: 25, logOnly: environment.production }),\n        EffectsModule.forRoot([UserEffects, SocketEffects]),\n    ],\n})\n\nexport class AppStoreModule { }\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n    production: false,\n    nsp: {\n        user: { url: '/user', options: {} },\n        guest: { url: '/guest', options: {} },\n    },\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"],"sourceRoot":"webpack:///"}