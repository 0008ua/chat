{"version":3,"sources":["./src/app/modules/chat/chat-routing.module.ts","./src/app/modules/chat/chat.component.ts","./src/app/modules/chat/chat.component.html","./src/app/modules/chat/chat.module.ts"],"names":[],"mappings":"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","file":"modules-chat-chat-module.js","sourcesContent":["import { CommonModule } from '@angular/common';\r\nimport { ChatComponent } from './chat.component';\r\nimport { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\n\r\nconst routes: Routes = [\r\n    {\r\n        path: '',\r\n        component: ChatComponent,\r\n    },\r\n    // {\r\n    //   path: '**',\r\n    //   redirectTo: '',\r\n    //   pathMatch: 'full',\r\n    // },\r\n];\r\n\r\n@NgModule({\r\n    imports: [\r\n        RouterModule.forChild(routes),\r\n        CommonModule,\r\n    ],\r\n    exports: [RouterModule],\r\n})\r\nexport class ChatRoutingModule { }\r\n","import { switchMap, tap, take, distinctUntilChanged } from 'rxjs/operators';\nimport { getActiveContact, getActiveContactMsgs, getContacts, getUserRooms } from './../../store/reducers/socket.reducer';\nimport { Contact, Message, Room } from 'src/app/interfaces';\nimport { LoginAnonymous } from './../../store/actions/user.actions';\nimport { GetMessages, GetMessagesSuccess, ActiveSockets, GetUserRooms, UpdateContacts, GetActiveContactMsgs, GetActiveContactMsgsSuccess } from './../../store/actions/socket.actions';\nimport { fromEvent, Observable } from 'rxjs';\nimport { Msg, User, ActiveSocket } from './../../interfaces';\nimport { SocketService } from './../../services/socket.service';\nimport { State } from './../../store/reducers/index';\nimport { UserService } from './../../services/user.service';\nimport { Component, OnInit, ViewChild, ElementRef, AfterViewInit, AfterViewChecked, HostListener } from '@angular/core';\nimport { Logout } from 'src/app/store/actions/user.actions';\nimport { Store } from '@ngrx/store';\nimport { getMsgs } from '../../store/reducers/socket.reducer';\nimport { getUser } from 'src/app/store/reducers/user.reducer';\n\n@Component({\n    selector: 'app-chat',\n    templateUrl: './chat.component.html',\n    styleUrls: ['./chat.component.scss'],\n})\nexport class ChatComponent implements OnInit, AfterViewChecked {\n    textValidation: boolean = false;\n    nameValidation: boolean = false;\n    msgs: Msg[] = [];\n    contacts: Contact[] = [];\n    userRooms: Room[];\n    activeContact: Contact;\n\n    @ViewChild('chatMessages', { static: false }) chatMessages: ElementRef;\n    @ViewChild('inpMsg', { static: true }) inpMsg: ElementRef;\n    @ViewChild('inpName', { static: false }) inpName: ElementRef;\n\n    inpMsgEvent$: Observable<InputEvent>;\n    inpNameEvent$: Observable<InputEvent>;\n    user: User;\n\n    constructor(\n        private store: Store<State>,\n        private socketService: SocketService,\n        private userService: UserService,\n    ) { }\n\n    @HostListener('keydown', ['$event'])\n    onPress(e: KeyboardEvent) {\n        if (e.key === 'Enter' && e.target === (this.inpMsg.nativeElement) as HTMLElement) {\n            this.send();\n        }\n    }\n\n    ngOnInit(): void {\n        this.store.select(getUser)\n            .subscribe((user) => {\n                if ((user && !this.user) || (user && this.user && this.user._id !== user._id)) {\n                    // dispatch action only on user logged in\n                    this.store.dispatch(new GetUserRooms());\n                }\n                this.user = user;\n            });\n\n        this.store.select(getUserRooms)\n            .subscribe((userRooms) => this.userRooms = userRooms);\n\n        this.store.select(getActiveContactMsgs)\n            .subscribe((msgs) => this.msgs = msgs);\n\n        this.store.select(getActiveContact)\n            .subscribe((activeContact) => this.activeContact = activeContact);\n\n        this.socketService.onSocketEvent('msg')\n            .subscribe((msg) => this.store.dispatch(new GetMessagesSuccess({ msgs: [msg] })));\n\n        this.store.select(getContacts)\n            .subscribe((contacts) => this.contacts = contacts);\n\n        this.socketService.onSocketEvent('activeSockets')\n            .subscribe((activeSockets) => {\n                activeSockets = activeSockets.filter((socket: ActiveSocket) => socket.user_id !== this.user._id);\n                this.store.dispatch(new ActiveSockets({ activeSockets }));\n            });\n\n        this.socketService.onSocketEvent('joinedRoom')\n            .subscribe((room_id) => {\n                this.store.dispatch(new GetUserRooms());\n            });\n\n        this.socketService.onSocketEvent('connect_error')\n            .subscribe((data) => console.log('socket connect_error', data));\n\n        this.inpMsgEvent$ = fromEvent(this.inpMsg.nativeElement, 'input');\n\n        this.inpMsgEvent$\n            .subscribe((inputEvent: InputEvent) => {\n                if (!this.inpMsg.nativeElement.value) {\n                    this.textValidation = false;\n                } else {\n                    this.textValidation = true;\n                }\n            });\n    }\n\n    loginAnonymous() {\n        const name = this.inpName.nativeElement.value;\n        this.store.dispatch(new LoginAnonymous(name));\n        this.inpName.nativeElement.value = '';\n        this.nameValidation = false;\n    }\n\n\n    ngAfterViewChecked(): void {\n        this.scrollTop();\n        if (this.inpName) {\n            this.inpNameEvent$ = fromEvent(this.inpName.nativeElement, 'input');\n            this.inpNameEvent$\n                .subscribe((inputEvent: InputEvent) => {\n                    if (!this.inpName.nativeElement.value) {\n                        this.nameValidation = false;\n                    } else {\n                        this.nameValidation = true;\n                    }\n                });\n        }\n    }\n\n    startChat(contact: Contact) {\n        const callback = (room_id: string) => {\n            contact = { ...contact, room_id };\n            this.store.dispatch(new GetActiveContactMsgs({ activeContact: contact }));\n        };\n        this.socketService.emitSocketEvent('joinRoom', [{requestedUser_id: contact.user_id}, callback]);\n    }\n\n    logout() {\n        this.store.dispatch(new Logout());\n    }\n\n    scrollTop() {\n        this.chatMessages.nativeElement.scrollTop = this.chatMessages.nativeElement.scrollHeight;\n    }\n\n    send() {\n        if (!this.textValidation) {\n            return;\n        }\n        const text = this.inpMsg.nativeElement.value;\n        console.log('msg send this.activeContact', this.activeContact);\n        this.socketService.emitSocketEvent('msg', { text, room_id: this.activeContact.room_id });\n        this.inpMsg.nativeElement.value = '';\n        this.textValidation = false;\n    }\n}\n","<div class=\"container-fluid text-light bg-dark\">\n\n  <!-- <div *ngIf=\"!user\" class=\"chat-regular\">\n        <div class=\"chat-regular__connect connect text-dark bg-light\">\n          <div class=\"connect__item\">\n            <input #inpName type=\"text\" class=\"form-control\" placeholder=\"Enter your name\">\n            <button class=\"btn btn-danger\" [disabled]=\"!nameValidation\" (click)=\"loginAnonymous()\">connect</button>\n          </div>\n        </div>\n      </div> -->\n\n  <div class=\"chat-regular\">\n    <div *ngIf=\"user\" class=\"chat-regular__contacts\">\n      <div class=\"contacts text-dark bg-light\">\n        <!-- <div *ngIf=\"activeContact\" class=\"contacts__header\">\n          {{activeContact?.userName}}\n        </div> -->\n        <ng-container *ngIf=\"contacts.length\">\n          <div *ngFor=\"let contact of contacts\" (click)=\"startChat(contact)\" class=\"contacts__item\"\n            [ngClass]=\"{'contacts__item_active': contact.user_id === activeContact?.user_id}\">\n            <i *ngIf=\"contact.userRole !== 'user'\" class=\"bi bi-person-fill pe-2 float-start\"></i>\n            <i *ngIf=\"contact.userRole === 'user'\" class=\"bi bi-person-check-fill pe-2 float-start\"></i>\n            <span>{{contact.userName}} </span><span class=\"badge bg-secondary\">{{contact.unreadedMessagesQty}}</span>\n            <i *ngIf=\"contact.room_id && !contact.socket_id\" class=\"bi bi-bookmark-fill ps-2 float-end\"></i>\n            <i *ngIf=\"!contact.room_id && contact.socket_id\" class=\"bi bi-bookmark-check ps-2 float-end\"></i>\n            <i *ngIf=\"contact.room_id && contact.socket_id\" class=\"bi bi-bookmark-check-fill ps-2 float-end\"></i>\n          </div>\n        </ng-container>\n\n\n      </div>\n    </div>\n    <div #chatMessages class=\"chat-regular__messages text-dark bg-light\">\n      <div class=\"messages\">\n\n        <div *ngFor=\"let msg of msgs\" class=\"messages__item\"\n          [ngClass]=\"[msg.author_id === user?._id ? 'messages__item_out': 'messages__item_in']\">\n          {{msg | json}}\n        </div>\n      </div>\n    </div>\n\n    <div class=\"chat-regular__compose compose\">\n      <div class=\"compose__text\">\n        <input #inpMsg type=\"text\" class=\"form-control\" placeholder=\"message\">\n      </div>\n      <div class=\"compose__send compose__send_regular\">\n        <button class=\"btn btn-light\" (click)=\"send()\" [disabled]=\"!textValidation\">Send</button>\n      </div>\n    </div>\n  </div>\n","import { ChatRoutingModule } from './chat-routing.module';\nimport { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ChatComponent } from './chat.component';\nimport { ChatCompactComponent } from './chat-compact/chat-compact.component';\n\n\n@NgModule({\n    declarations: [\n        ChatComponent,\n        // ChatCompactComponent,\n    ],\n    imports: [\n        CommonModule,\n        ChatRoutingModule,\n    ],\n    exports: [\n        // ChatCompactComponent,\n    ],\n})\n\nexport class ChatModule { }\n"],"sourceRoot":"webpack:///"}